module operators
{

    array [1D] reducer {
        entry reducer();
        entry reducer(ck::future<double>);
        entry reducer(ck::future<std::vector<double>>);

        entry void mul_then_add(ck::future<std::vector<double>>, ck::future<std::vector<double>>);

        entry [reductiontarget] void store(double);
    };

    chare add_vector {
        entry add_vector();
    
        template <typename _Tp1, typename _Tp2, typename _Tp3>
        entry [threaded] void add(ck::future<std::vector<_Tp1>>, ck::future<std::vector<_Tp2>>, ck::future<std::vector<_Tp3>>);
    };

    chare sub_vector {
        entry sub_vector();

        entry [threaded] void subtract(ck::future<std::vector<double>>, ck::future<std::vector<double>>, ck::future<std::vector<double>>);
    }

    chare loader {
        entry loader();
    
        entry [threaded] void load(ck::future<std::vector<double>>, ck::future<std::vector<double>>);
    };
}
